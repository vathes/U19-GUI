function [mazes, criteria, globalSettings, vr] = noworld(vr)

  %________________________________________ 1 _____________________________
  mazes     = struct( 'lStart'          , {30    30}   ...
                    , 'lCue'            , {1000  1000}   ...
                    , 'lMemory'         , {100   100}   ...
                    , 'tri_turnHint'    , {false false}   ...
                    , 'cueDuration'     , {nan   nan }   ... seconds
                    , 'cueVisibleAt'    , {inf   inf }   ...
                    , 'cueProbability'  , {inf   inf}   ...
                    , 'cueDensityPerM'  , {5     5}   ...
                    );                                                                                                                                           
  criteria  = struct( 'numTrials'       , {10    10}   ...
                    , 'numTrialsPerMin' , {2     2}   ...
                    , 'criteriaNTrials' , {inf   inf}   ...
                    , 'warmupNTrials'   , {[]    []}   ...
                    , 'numSessions'     , {0     0}   ...
                    , 'performance'     , {0     0}   ...
                    , 'maxBias'         , {inf   inf}   ...
                    , 'warmupMaze'      , {[]    []}   ...
                    , 'warmupPerform'   , {[]    []}   ...
                    , 'warmupBias'      , {[]    []}   ...
                    , 'warmupMotor'     , {[]    []}   ...
                    , 'easyBlock'       , {nan   []}   ... maze ID of easy block    
                    , 'easyBlockNTrials', {10    10}   ... number of trials in easy block   
                    , 'numBlockTrials'  , {20    20}   ... number of trials for sliding window perfromance
                    , 'blockPerform'    , {.7    .7}   ... performance threshold to go into easy block
                    );

  globalSettings          = {'cueMinSeparation', 12, 'fracDuplicated', 0.5, 'trialDuplication', 4};
  vr.numMazesInProtocol   = numel(mazes);
  vr.stimulusGenerator    = @PoissonStimulusTrain;
  vr.stimulusParameters   = {'cueVisibleAt', 'cueDensityPerM', 'cueProbability', 'nCueSlots', 'cueMinSeparation'};
  vr.inheritedVariables   = {'cueDuration', 'cueVisibleAt', 'lCue', 'lMemory'};

  
  if nargout < 1
    figure; plot([mazes.lStart] + [mazes.lCue] + [mazes.lMemory], 'linewidth',1.5); xlabel('Shaping step'); ylabel('Maze length (cm)'); grid on;
    hold on; plot([mazes.lMemory], 'linewidth',1.5); legend({'total', 'memory'}, 'Location', 'east'); grid on;
    figure; plot([mazes.lMemory] ./ [mazes.lCue], 'linewidth',1.5); xlabel('Shaping step'); ylabel('L(memory) / L(cue)'); grid on;
    figure; plot([mazes.cueDensityPerM], 'linewidth',1.5); set(gca,'ylim',[0 6.5]); xlabel('Shaping step'); ylabel('Tower density (count/m)'); grid on;
    hold on; plot([mazes.cueDensityPerM] .* (1 - 1./(1 + exp([mazes.cueProbability]))), 'linewidth',1.5);
    hold on; plot([mazes.cueDensityPerM] .* (1./(1 + exp([mazes.cueProbability]))), 'linewidth',1.5);
    hold on; plot([1 numel(mazes)], [1 1].*(100/globalSettings{2}), 'linewidth',1.5, 'linestyle','--');
    legend({'\rho_{L} + \rho_{R}', '\rho_{salient}', '\rho_{distract}', '(maximum)'}, 'location', 'northwest');
    (1./(1 + exp([mazes.cueProbability]))) ./ (1 - 1./(1 + exp([mazes.cueProbability])))
  end

end
